diff --cc credential.c
index 21b3ba152f,cf11cc98f4..108d9e183a
--- a/credential.c
+++ b/credential.c
@@@ -73,38 -87,16 +73,43 @@@ static int proto_is_http(const char *s
  	return !strcmp(s, "https") || !strcmp(s, "http");
  }
  
 +static void credential_describe(struct credential *c, struct strbuf *out);
 +static void credential_format(struct credential *c, struct strbuf *out);
 +
 +static int select_all(const struct urlmatch_item *a,
 +		      const struct urlmatch_item *b)
 +{
 +	return 0;
 +}
 +
  static void credential_apply_config(struct credential *c)
  {
 +	char *normalized_url;
 +	struct urlmatch_config config = { STRING_LIST_INIT_DUP };
 +	struct strbuf url = STRBUF_INIT;
 +
+ 	if (!c->host)
+ 		die(_("refusing to work with credential missing host field"));
+ 	if (!c->protocol)
+ 		die(_("refusing to work with credential missing protocol field"));
+ 
  	if (c->configured)
  		return;
 -	git_config(credential_config_callback, c);
 +
 +	config.section = "credential";
 +	config.key = NULL;
 +	config.collect_fn = credential_config_callback;
 +	config.cascade_fn = NULL;
 +	config.select_fn = select_all;
 +	config.cb = c;
 +
 +	credential_format(c, &url);
 +	normalized_url = url_normalize(url.buf, &config.url);
 +
 +	git_config(urlmatch_config_entry, &config);
 +	free(normalized_url);
 +	strbuf_release(&url);
 +
  	c->configured = 1;
  
  	if (!c->use_http_path && proto_is_http(c->protocol)) {
